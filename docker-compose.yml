# Docker Compose for local development
version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - MONGODB_URL=mongodb://mongodb:27017
      - DATABASE_NAME=surgiscan_documents_dev
      - SECRET_KEY=dev-secret-key-change-in-production
      - CORS_ORIGINS=http://localhost:3000,http://localhost:5173
      - STORAGE_TYPE=local
      - MAX_FILE_SIZE_MB=50
      - DEFAULT_PROCESSING_MODE=smart
      - LANDING_AI_API_KEY=${LANDING_AI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./app:/app/app  # Mount source code for development
      - ./storage:/app/storage  # Mount storage directory
      - ./logs:/app/logs  # Mount logs directory
    depends_on:
      - mongodb
      - redis
    networks:
      - surgiscan-network
    restart: unless-stopped

  # MongoDB database
  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=surgiscan_documents_dev
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - surgiscan-network
    restart: unless-stopped

  # Redis for caching and background jobs
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - surgiscan-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # MongoDB Express (optional - for database management)
  mongo-express:
    image: mongo-express:latest
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    depends_on:
      - mongodb
    networks:
      - surgiscan-network
    restart: unless-stopped
    profiles:
      - admin  # Only start with: docker-compose --profile admin up

  # Nginx reverse proxy (optional - for production-like setup)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # SSL certificates if needed
      - ./storage:/var/www/storage:ro  # Serve static files
    depends_on:
      - app
    networks:
      - surgiscan-network
    restart: unless-stopped
    profiles:
      - production  # Only start with: docker-compose --profile production up

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  surgiscan-network:
    driver: bridge